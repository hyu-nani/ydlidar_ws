// Generated by gencpp from file diagnostic_msgs/AddDiagnosticsRequest.msg
// DO NOT EDIT!


#ifndef DIAGNOSTIC_MSGS_MESSAGE_ADDDIAGNOSTICSREQUEST_H
#define DIAGNOSTIC_MSGS_MESSAGE_ADDDIAGNOSTICSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace diagnostic_msgs
{
template <class ContainerAllocator>
struct AddDiagnosticsRequest_
{
  typedef AddDiagnosticsRequest_<ContainerAllocator> Type;

  AddDiagnosticsRequest_()
    : load_namespace()  {
    }
  AddDiagnosticsRequest_(const ContainerAllocator& _alloc)
    : load_namespace(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _load_namespace_type;
  _load_namespace_type load_namespace;





  typedef boost::shared_ptr< ::diagnostic_msgs::AddDiagnosticsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::diagnostic_msgs::AddDiagnosticsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct AddDiagnosticsRequest_

typedef ::diagnostic_msgs::AddDiagnosticsRequest_<std::allocator<void> > AddDiagnosticsRequest;

typedef boost::shared_ptr< ::diagnostic_msgs::AddDiagnosticsRequest > AddDiagnosticsRequestPtr;
typedef boost::shared_ptr< ::diagnostic_msgs::AddDiagnosticsRequest const> AddDiagnosticsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::diagnostic_msgs::AddDiagnosticsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::diagnostic_msgs::AddDiagnosticsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::diagnostic_msgs::AddDiagnosticsRequest_<ContainerAllocator1> & lhs, const ::diagnostic_msgs::AddDiagnosticsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.load_namespace == rhs.load_namespace;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::diagnostic_msgs::AddDiagnosticsRequest_<ContainerAllocator1> & lhs, const ::diagnostic_msgs::AddDiagnosticsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace diagnostic_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::diagnostic_msgs::AddDiagnosticsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::diagnostic_msgs::AddDiagnosticsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::diagnostic_msgs::AddDiagnosticsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::diagnostic_msgs::AddDiagnosticsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diagnostic_msgs::AddDiagnosticsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::diagnostic_msgs::AddDiagnosticsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::diagnostic_msgs::AddDiagnosticsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c26cf6e164288fbc6050d74f838bcdf0";
  }

  static const char* value(const ::diagnostic_msgs::AddDiagnosticsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc26cf6e164288fbcULL;
  static const uint64_t static_value2 = 0x6050d74f838bcdf0ULL;
};

template<class ContainerAllocator>
struct DataType< ::diagnostic_msgs::AddDiagnosticsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "diagnostic_msgs/AddDiagnosticsRequest";
  }

  static const char* value(const ::diagnostic_msgs::AddDiagnosticsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::diagnostic_msgs::AddDiagnosticsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This service is used as part of the process for loading analyzers at runtime,\n"
"# and should be used by a loader script or program, not as a standalone service.\n"
"# Information about dynamic addition of analyzers can be found at\n"
"# http://wiki.ros.org/diagnostics/Tutorials/Adding%20Analyzers%20at%20Runtime\n"
"\n"
"# The load_namespace parameter defines the namespace where parameters for the\n"
"# initialization of analyzers in the diagnostic aggregator have been loaded. The\n"
"# value should be a global name (i.e. /my/name/space), not a relative\n"
"# (my/name/space) or private (~my/name/space) name. Analyzers will not be added\n"
"# if a non-global name is used. The call will also fail if the namespace\n"
"# contains parameters that follow a namespace structure that does not conform to\n"
"# that expected by the analyzer definitions. See\n"
"# http://wiki.ros.org/diagnostics/Tutorials/Configuring%20Diagnostic%20Aggregators\n"
"# and http://wiki.ros.org/diagnostics/Tutorials/Using%20the%20GenericAnalyzer\n"
"# for examples of the structure of yaml files which are expected to have been\n"
"# loaded into the namespace.\n"
"string load_namespace\n"
;
  }

  static const char* value(const ::diagnostic_msgs::AddDiagnosticsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::diagnostic_msgs::AddDiagnosticsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.load_namespace);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AddDiagnosticsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::diagnostic_msgs::AddDiagnosticsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::diagnostic_msgs::AddDiagnosticsRequest_<ContainerAllocator>& v)
  {
    s << indent << "load_namespace: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.load_namespace);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DIAGNOSTIC_MSGS_MESSAGE_ADDDIAGNOSTICSREQUEST_H
